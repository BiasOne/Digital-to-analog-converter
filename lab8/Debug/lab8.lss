
lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000400  00802000  0000057e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000057ce  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003dbc  00000000  00000000  000062c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000869  00000000  00000000  0000a082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  0000a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004c40  00000000  00000000  0000aa14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020c  00000000  00000000  0000f654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000f860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	14 e2       	ldi	r17, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e7       	ldi	r30, 0x7E	; 126
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 34 01 	call	0x268	; 0x268 <main>
 234:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 23c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000244 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000258 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 25e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 264:	8f 91       	pop	r24

 266:	08 95       	ret

00000268 <main>:
	0x1c7,0x1dc,0x1f2,0x207,0x21d,0x234,0x24a,0x261,
	0x278,0x28f,0x2a7,0x2bf,0x2d7,0x2ef,0x307,0x320,
0x338,0x351,0x36a,0x383,0x39c,0x3b5,0x3ce,0x3e7};

int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	1f 92       	push	r1
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
	clock_init();
 272:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
	tcc0_init();
 276:	0e 94 31 02 	call	0x462	; 0x462 <tcc0_init>
	daca_init();
 27a:	0e 94 45 02 	call	0x48a	; 0x48a <daca_init>
	usartd0_init();
 27e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <usartd0_init>
	
	DMA.CTRL = DMA_RESET_bm;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	20 e4       	ldi	r18, 0x40	; 64
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
	DMA.CH0.CTRLA = DMA_RESET_bm;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	20 e4       	ldi	r18, 0x40	; 64
 292:	fc 01       	movw	r30, r24
 294:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CH0.TRFCNT= (uint16_t)(sizeof(sinewaveVect));
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	32 e0       	ldi	r19, 0x02	; 2
 29e:	fc 01       	movw	r30, r24
 2a0:	24 8b       	std	Z+20, r18	; 0x14
 2a2:	35 8b       	std	Z+21, r19	; 0x15

	DMA.CH0.REPCNT = 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	fc 01       	movw	r30, r24
 2aa:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	31 e0       	ldi	r19, 0x01	; 1
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 89       	ldd	r18, Z+16	; 0x10
 2b8:	25 62       	ori	r18, 0x25	; 37
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc |DMA_CH_DESTRELOAD_BURST_gc|DMA_CH_DESTDIR_INC_gc;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	31 e0       	ldi	r19, 0x01	; 1
 2c6:	f9 01       	movw	r30, r18
 2c8:	22 89       	ldd	r18, Z+18	; 0x12
 2ca:	29 65       	ori	r18, 0x59	; 89
 2cc:	fc 01       	movw	r30, r24
 2ce:	22 8b       	std	Z+18, r18	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_DACA_CH0_gc;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	25 e1       	ldi	r18, 0x15	; 21
 2d6:	fc 01       	movw	r30, r24
 2d8:	23 8b       	std	Z+19, r18	; 0x13
	
	DMA.CH0.SRCADDR0= (uint8_t)((uintptr_t)sinewaveVect);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e2       	ldi	r19, 0x20	; 32
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1= (uint8_t)((uintptr_t)sinewaveVect >> 8);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e2       	ldi	r19, 0x20	; 32
 2ee:	23 2f       	mov	r18, r19
 2f0:	33 27       	eor	r19, r19
 2f2:	fc 01       	movw	r30, r24
 2f4:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2= (uint8_t)(((uint32_t)((uintptr_t)sinewaveVect)) >> 16);
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	31 e0       	ldi	r19, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e2       	ldi	r25, 0x20	; 32
 2fe:	cc 01       	movw	r24, r24
 300:	a0 e0       	ldi	r26, 0x00	; 0
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	cd 01       	movw	r24, r26
 306:	aa 27       	eor	r26, r26
 308:	bb 27       	eor	r27, r27
 30a:	f9 01       	movw	r30, r18
 30c:	82 8f       	std	Z+26, r24	; 0x1a
	
	DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH0DATA);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	28 e1       	ldi	r18, 0x18	; 24
 314:	fc 01       	movw	r30, r24
 316:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)((uintptr_t)&DACA.CH0DATA >> 8);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	23 e0       	ldi	r18, 0x03	; 3
 31e:	fc 01       	movw	r30, r24
 320:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)(((uint32_t)((uintptr_t)&DACA.CH0DATA)) >> 16);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	fc 01       	movw	r30, r24
 328:	16 8e       	std	Z+30, r1	; 0x1e
	
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	31 e0       	ldi	r19, 0x01	; 1
 332:	f9 01       	movw	r30, r18
 334:	20 89       	ldd	r18, Z+16	; 0x10
 336:	20 68       	ori	r18, 0x80	; 128
 338:	fc 01       	movw	r30, r24
 33a:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CTRL = DMA_ENABLE_bm;
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	20 e8       	ldi	r18, 0x80	; 128
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
	
	PMIC.CTRL |=PMIC_LOLVLEN_bm;
 346:	80 ea       	ldi	r24, 0xA0	; 160
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	20 ea       	ldi	r18, 0xA0	; 160
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	22 81       	ldd	r18, Z+2	; 0x02
 352:	21 60       	ori	r18, 0x01	; 1
 354:	fc 01       	movw	r30, r24
 356:	22 83       	std	Z+2, r18	; 0x02
	sei();
 358:	78 94       	sei
	
	TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	98 e0       	ldi	r25, 0x08	; 8
 35e:	22 e0       	ldi	r18, 0x02	; 2
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18

	
	while(1)
	{
		char input = usartd0_in_char();
 364:	0e 94 ab 02 	call	0x556	; 0x556 <usartd0_in_char>
 368:	89 83       	std	Y+1, r24	; 0x01
		usartd0_out_char(input);
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	88 2f       	mov	r24, r24
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 90 02 	call	0x520	; 0x520 <usartd0_out_char>
		
		if (input == 'h')
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	88 36       	cpi	r24, 0x68	; 104
 378:	c1 f5       	brne	.+112    	; 0x3ea <main+0x182>
		{
			DMA.CH0.CTRLA = 0;			
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	fc 01       	movw	r30, r24
 380:	10 8a       	std	Z+16, r1	; 0x10
			DMA.CH0.TRFCNT= (uint16_t)(sizeof(sinewaveVectHalf));
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	32 e0       	ldi	r19, 0x02	; 2
 38a:	fc 01       	movw	r30, r24
 38c:	24 8b       	std	Z+20, r18	; 0x14
 38e:	35 8b       	std	Z+21, r19	; 0x15
			
			DMA.CH0.SRCADDR0= (uint8_t)((uintptr_t)sinewaveVectHalf);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	32 e2       	ldi	r19, 0x22	; 34
 398:	fc 01       	movw	r30, r24
 39a:	20 8f       	std	Z+24, r18	; 0x18
			DMA.CH0.SRCADDR1= (uint8_t)((uintptr_t)sinewaveVectHalf >> 8);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	32 e2       	ldi	r19, 0x22	; 34
 3a4:	23 2f       	mov	r18, r19
 3a6:	33 27       	eor	r19, r19
 3a8:	fc 01       	movw	r30, r24
 3aa:	21 8f       	std	Z+25, r18	; 0x19
			DMA.CH0.SRCADDR2= (uint8_t)(((uint32_t)((uintptr_t)sinewaveVectHalf)) >> 16);
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	31 e0       	ldi	r19, 0x01	; 1
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	92 e2       	ldi	r25, 0x22	; 34
 3b4:	cc 01       	movw	r24, r24
 3b6:	a0 e0       	ldi	r26, 0x00	; 0
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	cd 01       	movw	r24, r26
 3bc:	aa 27       	eor	r26, r26
 3be:	bb 27       	eor	r27, r27
 3c0:	f9 01       	movw	r30, r18
 3c2:	82 8f       	std	Z+26, r24	; 0x1a
		
			DMA.CH0.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	31 e0       	ldi	r19, 0x01	; 1
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 89       	ldd	r18, Z+16	; 0x10
 3d0:	25 62       	ori	r18, 0x25	; 37
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 8b       	std	Z+16, r18	; 0x10
			DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	31 e0       	ldi	r19, 0x01	; 1
 3de:	f9 01       	movw	r30, r18
 3e0:	20 89       	ldd	r18, Z+16	; 0x10
 3e2:	20 68       	ori	r18, 0x80	; 128
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 8b       	std	Z+16, r18	; 0x10
 3e8:	bd cf       	rjmp	.-134    	; 0x364 <main+0xfc>
		}
		else if(input == 'o')
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	8f 36       	cpi	r24, 0x6F	; 111
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x18a>
 3f0:	b9 cf       	rjmp	.-142    	; 0x364 <main+0xfc>
		{
			DMA.CH0.CTRLA = 0;			
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	fc 01       	movw	r30, r24
 3f8:	10 8a       	std	Z+16, r1	; 0x10
			DMA.CH0.TRFCNT= (uint16_t)(sizeof(sinewaveVect));
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	32 e0       	ldi	r19, 0x02	; 2
 402:	fc 01       	movw	r30, r24
 404:	24 8b       	std	Z+20, r18	; 0x14
 406:	35 8b       	std	Z+21, r19	; 0x15
			
			DMA.CH0.SRCADDR0= (uint8_t)((uintptr_t)sinewaveVect);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e2       	ldi	r19, 0x20	; 32
 410:	fc 01       	movw	r30, r24
 412:	20 8f       	std	Z+24, r18	; 0x18
			DMA.CH0.SRCADDR1= (uint8_t)((uintptr_t)sinewaveVect >> 8);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e2       	ldi	r19, 0x20	; 32
 41c:	23 2f       	mov	r18, r19
 41e:	33 27       	eor	r19, r19
 420:	fc 01       	movw	r30, r24
 422:	21 8f       	std	Z+25, r18	; 0x19
			DMA.CH0.SRCADDR2= (uint8_t)(((uint32_t)((uintptr_t)sinewaveVect)) >> 16);
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	31 e0       	ldi	r19, 0x01	; 1
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e2       	ldi	r25, 0x20	; 32
 42c:	cc 01       	movw	r24, r24
 42e:	a0 e0       	ldi	r26, 0x00	; 0
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	cd 01       	movw	r24, r26
 434:	aa 27       	eor	r26, r26
 436:	bb 27       	eor	r27, r27
 438:	f9 01       	movw	r30, r18
 43a:	82 8f       	std	Z+26, r24	; 0x1a
					
			DMA.CH0.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	31 e0       	ldi	r19, 0x01	; 1
 444:	f9 01       	movw	r30, r18
 446:	20 89       	ldd	r18, Z+16	; 0x10
 448:	25 62       	ori	r18, 0x25	; 37
 44a:	fc 01       	movw	r30, r24
 44c:	20 8b       	std	Z+16, r18	; 0x10
			DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	31 e0       	ldi	r19, 0x01	; 1
 456:	f9 01       	movw	r30, r18
 458:	20 89       	ldd	r18, Z+16	; 0x10
 45a:	20 68       	ori	r18, 0x80	; 128
 45c:	fc 01       	movw	r30, r24
 45e:	20 8b       	std	Z+16, r18	; 0x10
		}
	}
 460:	81 cf       	rjmp	.-254    	; 0x364 <main+0xfc>

00000462 <tcc0_init>:
}

void tcc0_init(void)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
	TCC0.PER=60;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	98 e0       	ldi	r25, 0x08	; 8
 46e:	2c e3       	ldi	r18, 0x3C	; 60
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	fc 01       	movw	r30, r24
 474:	26 a3       	std	Z+38, r18	; 0x26
 476:	37 a3       	std	Z+39, r19	; 0x27
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	20 ec       	ldi	r18, 0xC0	; 192
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
}
 482:	00 00       	nop
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <daca_init>:


void daca_init(void)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc | DAC_CH0TRIG_bm;
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	93 e0       	ldi	r25, 0x03	; 3
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	fc 01       	movw	r30, r24
 49a:	21 83       	std	Z+1, r18	; 0x01
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	93 e0       	ldi	r25, 0x03	; 3
 4a0:	28 e1       	ldi	r18, 0x18	; 24
 4a2:	fc 01       	movw	r30, r24
 4a4:	22 83       	std	Z+2, r18	; 0x02
	DACA.EVCTRL = DAC_EVSEL_0_gc;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	93 e0       	ldi	r25, 0x03	; 3
 4aa:	fc 01       	movw	r30, r24
 4ac:	13 82       	std	Z+3, r1	; 0x03
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	93 e0       	ldi	r25, 0x03	; 3
 4b2:	25 e0       	ldi	r18, 0x05	; 5
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
 4b8:	00 00       	nop
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <usartd0_init>:
* Output: N/A
******************************************************************************/
void usartd0_out_string(char * str)
{
	while(*str) usartd0_out_char(*(str++));
}
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	80 e6       	ldi	r24, 0x60	; 96
 4ca:	96 e0       	ldi	r25, 0x06	; 6
 4cc:	28 e0       	ldi	r18, 0x08	; 8
 4ce:	fc 01       	movw	r30, r24
 4d0:	25 83       	std	Z+5, r18	; 0x05
 4d2:	80 e6       	ldi	r24, 0x60	; 96
 4d4:	96 e0       	ldi	r25, 0x06	; 6
 4d6:	28 e0       	ldi	r18, 0x08	; 8
 4d8:	fc 01       	movw	r30, r24
 4da:	21 83       	std	Z+1, r18	; 0x01
 4dc:	80 e6       	ldi	r24, 0x60	; 96
 4de:	96 e0       	ldi	r25, 0x06	; 6
 4e0:	24 e0       	ldi	r18, 0x04	; 4
 4e2:	fc 01       	movw	r30, r24
 4e4:	22 83       	std	Z+2, r18	; 0x02
 4e6:	80 ea       	ldi	r24, 0xA0	; 160
 4e8:	99 e0       	ldi	r25, 0x09	; 9
 4ea:	2e e2       	ldi	r18, 0x2E	; 46
 4ec:	fc 01       	movw	r30, r24
 4ee:	26 83       	std	Z+6, r18	; 0x06
 4f0:	80 ea       	ldi	r24, 0xA0	; 160
 4f2:	99 e0       	ldi	r25, 0x09	; 9
 4f4:	28 e9       	ldi	r18, 0x98	; 152
 4f6:	fc 01       	movw	r30, r24
 4f8:	27 83       	std	Z+7, r18	; 0x07
 4fa:	80 ea       	ldi	r24, 0xA0	; 160
 4fc:	99 e0       	ldi	r25, 0x09	; 9
 4fe:	23 e0       	ldi	r18, 0x03	; 3
 500:	fc 01       	movw	r30, r24
 502:	25 83       	std	Z+5, r18	; 0x05
 504:	80 ea       	ldi	r24, 0xA0	; 160
 506:	99 e0       	ldi	r25, 0x09	; 9
 508:	28 e1       	ldi	r18, 0x18	; 24
 50a:	fc 01       	movw	r30, r24
 50c:	24 83       	std	Z+4, r18	; 0x04
 50e:	80 ea       	ldi	r24, 0xA0	; 160
 510:	99 e0       	ldi	r25, 0x09	; 9
 512:	20 e1       	ldi	r18, 0x10	; 16
 514:	fc 01       	movw	r30, r24
 516:	23 83       	std	Z+3, r18	; 0x03
 518:	00 00       	nop
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <usartd0_out_char>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	1f 92       	push	r1
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	00 00       	nop
 52e:	80 ea       	ldi	r24, 0xA0	; 160
 530:	99 e0       	ldi	r25, 0x09	; 9
 532:	fc 01       	movw	r30, r24
 534:	81 81       	ldd	r24, Z+1	; 0x01
 536:	88 2f       	mov	r24, r24
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	80 72       	andi	r24, 0x20	; 32
 53c:	99 27       	eor	r25, r25
 53e:	89 2b       	or	r24, r25
 540:	b1 f3       	breq	.-20     	; 0x52e <usartd0_out_char+0xe>
 542:	80 ea       	ldi	r24, 0xA0	; 160
 544:	99 e0       	ldi	r25, 0x09	; 9
 546:	29 81       	ldd	r18, Y+1	; 0x01
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
 54c:	00 00       	nop
 54e:	0f 90       	pop	r0
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <usartd0_in_char>:
* Purpose: To read in a character from the receiver within USARTD0.
* Input(s): N/A
* Output: (char)
******************************************************************************/
char usartd0_in_char(void)
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
  /* intentionally left blank */
  while(!(USARTD0.STATUS & USART_RXCIF_bm));    
 55e:	00 00       	nop
 560:	80 ea       	ldi	r24, 0xA0	; 160
 562:	99 e0       	ldi	r25, 0x09	; 9
 564:	fc 01       	movw	r30, r24
 566:	81 81       	ldd	r24, Z+1	; 0x01
 568:	88 23       	and	r24, r24
 56a:	d4 f7       	brge	.-12     	; 0x560 <usartd0_in_char+0xa>
  
  return USARTD0.DATA;
 56c:	80 ea       	ldi	r24, 0xA0	; 160
 56e:	99 e0       	ldi	r25, 0x09	; 9
 570:	fc 01       	movw	r30, r24
 572:	80 81       	ld	r24, Z
 
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
